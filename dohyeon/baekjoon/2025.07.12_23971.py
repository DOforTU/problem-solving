# 문제
# 2021년 12월, 네 번째로 개최된 ZOAC의 오프닝을 맡은 성우는 오프라인 대회를 대비하여 강의실을 예약하려고 한다.

# 강의실에서 대회를 치르려면 거리두기 수칙을 지켜야 한다!

# 한 명씩 앉을 수 있는 테이블이 행마다 W개씩 H행에 걸쳐 있을 때, 
# 모든 참가자는 세로로 N칸 또는 가로로 M칸 이상 비우고 앉아야 한다. 
# 즉, 다른 모든 참가자와 세로줄 번호의 차가 N보다 크거나 가로줄 번호의 차가 M보다 큰 곳에만 앉을 수 있다.

# 논문과 과제에 시달리는 성우를 위해 강의실이 거리두기 수칙을 지키면서 최대 몇 명을 수용할 수 있는지 구해보자.

# 입력
# H, W, N, M이 공백으로 구분되어 주어진다. (0 < H, W, N, M ≤ 50,000)

# 출력
# 강의실이 수용할 수 있는 최대 인원 수를 출력한다.

# H가 행, W가 열, N이 세로줄 번호의 차, M이 가로줄 번호의 차
H, W, N, M = map(int, input().split())

# 거리두기 수칙을 지키면서 최대 몇 명을 수용할 수 있는지 계산
# max_people = 0

# # 각 행에 대해
# for row in range(0, H, N + 1):
#     # 각 열에 대해
#     for col in range(0, W, M + 1):
#         max_people += 1

# print(max_people)

# 위 반복문은 연산 속도가 O(N * M)으로 느리므로,
# 수학적으로 계산하여 O(1)로 최적화할 수 있음.

# N을 더하는 이유: 마지막 위치에서도 앉을 수 있는 경우를 올바르게 계산하기 위함
rows = (H + N) // (N + 1) # 실제로는 N + 1칸마다 앉을 수 있으므로, (H + N) // (N + 1)로 계산
cols = (W + M) // (M + 1)

print(rows * cols)

